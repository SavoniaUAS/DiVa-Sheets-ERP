function muokkaaTarjous() {
  var response = Browser.msgBox('Tuo tarjous tarjouslistalta?', Browser.Buttons.YES_NO);
  if (response == "no") {
    result = Browser.msgBox('Tarjousta ei tuotu');
    return;
  }
  else
    var tarjouslista = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Tarjouslista");
  var tarjouslaskenta = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Tarjouslaskenta");
  var customerSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Asiakaslista");
  var ui = SpreadsheetApp.getUi();
  var result = ui.prompt('Syötä projektinumero', ui.ButtonSet.OK_CANCEL);
  var button = result.getSelectedButton();
  var projektinumero = result.getResponseText();
  console.log(projektinumero);
  if (button == ui.Button.CANCEL) {
    Browser.msgBox("Tarjouslistan tietoja ei tuotu");
  }
  else
    //var searchString = sheet.getRange("B5").getValue();

    //Numero jonka avulla etsitään projektinumero
    var numberFinder = tarjouslista.createTextFinder(projektinumero);
  var tarjouslistasheet = tarjouslista.getRange("A2");
  var tarjouslistarivit = tarjouslistasheet.getDataRegion(SpreadsheetApp.Dimension.ROWS);

  //Tarjouslaskennan tarjouksen rivimäärien luku
  var listarivimaara = tarjouslistarivit.getValues().length - 1;
  //Rivinumero
  try {
    var searchRow = numberFinder.findNext().getRow();
    var projektinumerovalue = tarjouslista.getRange(searchRow, 1, 1, 1).getValue();
    var asiakasnumerovalue = tarjouslista.getRange(searchRow, 2, 1, 1).getValue();
    console.log(projektinumerovalue);
    console.log(searchRow);
    for (var i = 0; i < listarivimaara; i++) {
      if (tarjouslista.getRange(searchRow, 8, 1, 1).isChecked() == true && projektinumero == projektinumerovalue) {
        break;
      }
      else {

        searchRow = numberFinder.matchEntireCell(true).findNext().getRow();
        projektinumerovalue = tarjouslista.getRange(searchRow, 1, 1, 1).getValue();
        asiakasnumerovalue = tarjouslista.getRange(searchRow, 2, 1, 1).getValue();
      }
    }

  }
  catch (e) {
    Browser.msgBox("Projektinumeroa ei löytynyt");
    return;
  }

  var asiakasSheet = customerSheet.getRange("A2");
  var asiakasrivit = asiakasSheet.getDataRegion(SpreadsheetApp.Dimension.ROWS);
  var asiakasrivimaara = asiakasrivit.getValues().length - 1;
  var c = 2
  var asiakasnumero = customerSheet.getRange(c,1,1,1).getValue();
  for(var i = 0; i < asiakasrivimaara;i++){
    asiakasnumero = customerSheet.getRange(c,1,1,1).getValue();
    console.log("Asiakasnumero : " + asiakasnumero);
    if( asiakasnumero === asiakasnumerovalue){
      var asiakasValues = customerSheet.getRange(c,1,1,8).getValues();
      console.log(asiakasValues); 
      console.log(asiakasnumerovalue);
      break;

    }
    c = c + 1;

  }
 
  var value = tarjouslista.getRange(searchRow, 1, 1, 7);

  //Palauttaa ensimmäisen rivin datan, joka mätsää projektinumeron kanssa
  var allValues = value.getValues();

  var customerRow = 1
  var placeValues = tarjouslaskenta.getRange('B' + customerRow);
  for (var i = 0; i < 8; i++) {
    placeValues.setValue(asiakasValues[0][i]);
    customerRow = customerRow + 1;
    placeValues = tarjouslaskenta.getRange('B' + customerRow);

  }
 

  var tarjousrivinro = 13;
  var sheet = tarjouslaskenta.getRange('A13');

  /*Tarjouslaskenta välilehdeltä pitää tyhjentää olemassaolevat rivit,koska jos tarjouslistasta tuotuja rivejä
  on vähemmän kuin tarjouslaskennassa olevia rivejä, vanhat rivit jäävät sotkemaan */

  //Selvitetään monta riviä tarjouslaskennassa on
  var rivit = sheet.getDataRegion(SpreadsheetApp.Dimension.ROWS);

  //Tarjouslaskennan tarjouksen rivimäärien luku
  var rivimaara = rivit.getValues().length - 1;

  //Tarjouslaskennan tarjouksen koko alue
  var alue = tarjouslaskenta.getRange('A13').getDataRegion(SpreadsheetApp.Dimension.COLUMNS).
    getDataRegion(SpreadsheetApp.Dimension.ROWS).offset(1, 0, rivimaara);

  //Tyhjennetään alue
  //alue.clearContent();
  var tyhjennysalue;
  var destination;
  var copyValue;
  var copyKate;
  var copyHuom;
  var kateDestination;
  var huomDestination;
  //var kplDestination;
  var katealue;

  var newprojektinumero = tarjouslista.getRange(searchRow, 1, 1, 1).getValue();
  tarjouslaskenta.getRange("D1").setValue(newprojektinumero);
  var asiakasnumero = tarjouslista.getRange(searchRow, 2, 1, 1).getValue();
  tarjouslaskenta.getRange("B1").setValue(asiakasnumero);
  var asiakas = tarjouslista.getRange(searchRow, 3, 1, 1).getValue();
  tarjouslaskenta.getRange("B2").setValue(asiakas);
  var asiakasViite = tarjouslista.getRange(searchRow, 4, 1, 1).getValue();
  tarjouslaskenta.getRange("D3").setValue(asiakasViite)
  var projektinimi = tarjouslista.getRange(searchRow, 5, 1, 1).getValue();
  tarjouslaskenta.getRange("D2").setValue(projektinimi);
  var pvm = tarjouslista.getRange(searchRow, 6, 1, 1).getValue();
  tarjouslaskenta.getRange("D6").setValue(pvm);
  var toimitus = tarjouslista.getRange(searchRow, 7, 1, 1).getValue().toString();
  var toimitusDate = (1 + (toimitus - 1) * 7 + 6);
  var date = new Date(2023, 0, toimitusDate);
  var toimituspvm = Utilities.formatDate(date, "GMT+1", "yyyy/MM/dd");
  console.log(toimituspvm);
  tarjouslaskenta.getRange("D5").setValue(toimituspvm);

  var counter = 0
  for (var i = 0; i < rivimaara; i++) {
    tyhjennysalue = tarjouslaskenta.getRange(tarjousrivinro, 1, 1, 12);
    tyhjennysalue.clearContent().setBackground("white");
    tyhjennysalue = tarjouslaskenta.getRange(tarjousrivinro, 17, 1, 2);
    tyhjennysalue.clearContent().setBackground("white");
    tarjousrivinro = tarjousrivinro + 1;
  }
  tarjousrivinro = 13;
  //Jos rivin data mätsää projektinumeron kanssa aloitetaan for-loop
  if (projektinumerovalue == projektinumero) {

    for (var i = 0; i < listarivimaara; i++) {
      projektinumerovalue = tarjouslista.getRange(searchRow, 1, 1, 1).getValues();
      if (projektinumerovalue[0][0] == projektinumero && tarjouslista.getRange(searchRow, 8, 1, 1).isChecked()) {
        //Lisätään rivinumeroa joka kierroksella
        copyHuom = tarjouslista.getRange(searchRow, 27, 1, 1);
        copyKate = tarjouslista.getRange(searchRow, 26, 1, 1,);
        copyValue = tarjouslista.getRange(searchRow, 10, 1, 12);
        //copyKpl = tarjouslista.getRange(searchRow,10,1,1)
        allValues = copyValue.getValues();
        //kplDestination = tarjouslaskenta.getRange(tarjousrivinro,1,1,1);
        destination = tarjouslaskenta.getRange(tarjousrivinro, 1, 1, 12);
        kateDestination = tarjouslaskenta.getRange(tarjousrivinro, 17, 1, 1);
        huomDestination = tarjouslaskenta.getRange(tarjousrivinro, 18, 1, 1);
        alue = copyValue;
        alue.copyTo(destination);
        destination.setBackground("white");
        destination.setFontFamily("Comfortaa");
        katealue = copyKate;
        katealue.copyTo(kateDestination);
        copyHuom.copyTo(huomDestination);

        searchRow = searchRow + 1;
        tarjousrivinro = tarjousrivinro + 1
        counter = counter + 1;
        kateDestination.setFontFamily("Comfortaa").setBackground("white");
        huomDestination.setFontFamily("Comfortaa").setBackground("white");
      }

      if (projektinumerovalue[0][0] != projektinumero && counter > 0) {
        Browser.msgBox("Tarjous tuotu tarjouslistasta");
        muotoilu()
        return;
      }

    }

  }

}
function muotoilu() {
  asetaMuotoilu();
}







